import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import requests
from bs4 import BeautifulSoup
from readability import Document
import ollama
from youtube_transcript_api import YouTubeTranscriptApi
from urllib.parse import urlparse, parse_qs
from googleapiclient.discovery import build
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = "8046244586:AAEwmDRAlBWnZdP9nvV6TuFmSwxzARlRgOM"
YOUTUBE_API_KEY = "AIzaSyBzjSU0Kso-dj24JFO60WhUnMssUFHeDHs"  # –ü–æ–ª—É—á–∏—Ç—å: https://console.cloud.google.com/
MAX_TEXT_LENGTH = 4000

# –ü—Ä–æ–≤–µ—Ä–∫–∞ YouTube-—Å—Å—ã–ª–∫–∏
def is_youtube_url(url: str) -> bool:
    youtube_pattern = r'(https?://)?(www\.)?(youtube|youtu)\.(com|be)'
    return re.match(youtube_pattern, url) is not None

# –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –≤–∏–¥–µ–æ
def get_video_id(url: str) -> str:
    if "youtu.be" in url:
        return url.split("/")[-1].split("?")[0]
    parsed = urlparse(url)
    if parsed.netloc == "youtube.com" or parsed.netloc == "www.youtube.com":
        return parse_qs(parsed.query).get("v", [""])[0]
    return ""

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É–±—Ç–∏—Ç—Ä–æ–≤
def get_youtube_transcript(video_id: str) -> str:
    try:
        transcript = YouTubeTranscriptApi.get_transcript(video_id, languages=["ru", "en"])
        return " ".join([entry["text"] for entry in transcript])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å—É–±—Ç–∏—Ç—Ä–æ–≤: {str(e)}")
        return ""

# –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö YouTube
def get_youtube_metadata(video_id: str) -> str:
    try:
        youtube = build('youtube', 'v3', developerKey=YOUTUBE_API_KEY)
        request = youtube.videos().list(
            part="snippet",
            id=video_id
        )
        response = request.execute()
        
        if not response['items']:
            return ""
            
        snippet = response['items'][0]['snippet']
        metadata = [
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {snippet['title']}",
            f"–ê–≤—Ç–æ—Ä: {snippet['channelTitle']}",
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {snippet['description'][:500]}..."
        ]
        return "\n".join(metadata)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return ""

# –ü–∞—Ä—Å–∏–Ω–≥ –æ–±—ã—á–Ω—ã—Ö —Å–∞–π—Ç–æ–≤
def extract_website_text(url: str) -> str:
    try:
        headers = {"User-Agent": "Mozilla/5.0"}
        response = requests.get(url, headers=headers, timeout=10)
        doc = Document(response.text)
        soup = BeautifulSoup(doc.summary(), "html.parser")
        text = soup.get_text(separator=" ", strip=True)
        return text if text else "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç."
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {str(e)}"

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
def extract_text(url: str) -> str:
    if is_youtube_url(url):
        video_id = get_video_id(url)
        if not video_id:
            return "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å ID –≤–∏–¥–µ–æ."
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å—É–±—Ç–∏—Ç—Ä—ã
        transcript = get_youtube_transcript(video_id)
        if transcript:
            return transcript
            
        # –ï—Å–ª–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –Ω–µ—Ç, –ø–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadata = get_youtube_metadata(video_id)
        if metadata:
            return f"–í–∏–¥–µ–æ –±–µ–∑ —Å—É–±—Ç–∏—Ç—Ä–æ–≤. –î–æ—Å—Ç—É–ø–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n{metadata}"
            
        return "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ."
    
    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–∞–π—Ç–æ–≤
    return extract_website_text(url)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
def explain_with_ai(text: str) -> str:
    prompt = f"""
    –û–±—ä—è—Å–Ω–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç —Ä–æ–≤–Ω–æ 144 —Å–ª–æ–≤–∞–º–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ë—É–¥—å —Ç–æ—á–µ–Ω –∏ –∫—Ä–∞—Ç–æ–∫.
    –ï—Å–ª–∏ —ç—Ç–æ –≤–∏–¥–µ–æ –±–µ–∑ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ - —Å–¥–µ–ª–∞–π –≤—ã–≤–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –æ–ø–∏—Å–∞–Ω–∏—è.
    –¢–µ–∫—Å—Ç: {text[:10000]}
    """
    try:
        response = ollama.generate(
            model="granite3.3:2b",
            prompt=prompt,
            options={"temperature": 0.1, "num_predict": 150}
        )
        words = response["response"].split()
        return " ".join(words[:100])
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ò–ò: {str(e)}"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üîç –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ç—å—é –∏–ª–∏ YouTube-–≤–∏–¥–µ–æ, "
        "–∏ —è –æ–±—ä—è—Å–Ω—é –µ—ë —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ä–æ–≤–Ω–æ 100 —Å–ª–æ–≤–∞–º–∏.\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ https://ru.wikipedia.org/wiki/–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π_–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç\n"
        "‚Ä¢ https://youtu.be/dQw4w9WgXcQ"
    )

async def handle_url(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = update.message.text.strip()
    if not url.startswith(("http://", "https://")):
        await update.message.reply_text("‚ùå –≠—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    await update.message.reply_text("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...")
    
    try:
        text = extract_text(url)
        if not text or "–û—à–∏–±–∫–∞" in text:
            await update.message.reply_text(text if text else "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Å—ã–ª–∫—É.")
            return

        explanation = explain_with_ai(text)
        await update.message.reply_text(f"üìö –û–±—ä—è—Å–Ω–µ–Ω–∏–µ (100 —Å–ª–æ–≤):\n\n{explanation}")
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

def main():
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_url))
    application.run_polling()

if __name__ == "__main__":
    main()